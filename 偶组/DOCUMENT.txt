
Specifically:

Function Implementation
Specific data structures can be found in the header file.

1.
Write all the contents (inverted index) of a WordMap to the hard disk.
void write_data_base(WordMap M); (It's better not to change it, I did it well.)

Read the inverted index from the hard disk into a WordMap in memory.
void read_stru(WordMap &M); (Same as above)

Print all the contents of the inverted index to the screen.
void pwrite_map(WordMap M);

2.
Search Functionality
Input: an array of keywords w, the count n, the inverted index M, output sorted files with offsets stored in tmp.
void sort_file_off(string w[], int n, WordMap M, ScoreLocate &tmp);
Includes functions for normalization merging and scoring.

Normalization merging, with parameters same as above.
void combine(ScoreLocate &tmp, WordMap M, string word[], int n); 
Scoring, with parameters same as above.
void sortfile(WordMap M, string word[], int n, ScoreLocate &tmp); (Same as above)

3.
Regarding testing, there is a folder named "database" below the program to store data files. Other functions are described below.
Insert a test inverted index.
WordMap to be inserted, the keyword word to be inserted, the list of all files filename, the number of files in the list n, the frequency sequence count, the total number of words in the article, the word offset sequence.
void insert(WordMap &M, string &word, string filename[], int n, int count[], int total[], WordOff off[]);
Usage example:
word[0] = "的子";
string filename[] = {"ahh", "full", "gkl", "heloij"};
int count[] = {12, 13, 14, 15};
int total[] = {100, 90, 110, 200};
WordOff off[] = {{1, 3, 4}, {1, 5, 9}, {1, 7, 8}, {9, 11, 17}};
insert(M, word[0], filename, 4, count, total, off);
As shown above, one index is inserted.



